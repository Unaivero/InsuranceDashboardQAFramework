// Refined Jenkinsfile for Insurance Dashboard QA Automation Framework
pipeline {
    agent any // Or specify a specific agent/node: agent { label 'maven-agent' }

    tools {
        // Ensure Maven is configured in Jenkins Global Tool Configuration
        maven 'Maven3' // Replace 'Maven3' with your Maven tool name in Jenkins
    }

    parameters {
        string(name: 'BROWSER', defaultValue: 'chrome', description: 'Browser to run tests on (chrome, firefox, edge)')
        string(name: 'LANGUAGE', defaultValue: 'en', description: 'Language for the application UI (en, es)')
        // Add other parameters as needed, e.g., environment URL
    }

    stages {
        stage('Checkout') {
            steps {
                // This step would typically checkout from a Source Code Management (SCM) system like Git
                echo 'Checking out SCM... (placeholder for actual checkout)'
                // Example for Git:
                // git branch: 'main', url: 'your-repository-url.git'
            }
        }

        stage('Build') {
            steps {
                echo "Building the project..."
                // If using mvnw (Maven wrapper), ensure it's executable: sh './mvnw clean install -DskipTests'
                // Otherwise, use the configured Maven tool:
                sh "mvn clean install -DskipTests"
            }
        }

        stage('Test') {
            steps {
                echo "Running tests with Browser: ${params.BROWSER} and Language: ${params.LANGUAGE}..."
                // Pass parameters to Maven. Ensure your WebDriverUtil and ConfigReader can pick these up via System.getProperty()
                sh "mvn test -Dbrowser=${params.BROWSER} -Dlanguage=${params.LANGUAGE}"
            }
        }

        stage('Generate Allure Report') {
            // This stage requires the Allure Jenkins Plugin to be installed and configured.
            // It uses the allure-results generated by the Allure Cucumber adapter.
            // The plugin provides the 'allure' step.
            steps {
                echo "Generating Allure report..."
                // The command 'allure' comes from the Allure Jenkins plugin
                // It will look for results in the default path 'target/allure-results'
                // or the path specified in pom.xml (which is target/allure-results)
            }
            // This step is often better placed in the 'post' section to ensure it runs
            // and to publish the report regardless of test success/failure.
        }
    }

    post {
        always {
            echo 'Archiving JUnit test results...'
            junit 'target/surefire-reports/*.xml' // Archive JUnit XML results for Jenkins to display standard test trends

            echo 'Publishing Allure Report...'
            // This requires the Allure Jenkins Plugin.
            // It will automatically find results in 'target/allure-results' (or as configured).
            allure includeProperties: false, report: 'allure-report', results: [[path: 'target/allure-results']]
            // The 'report' parameter specifies the subdirectory within the build's archive for the report.
            // 'results' specifies the path to the Allure results relative to the workspace.
        }
        // Example: Send notifications on failure
        // failure {
        //     mail to: 'your-email@example.com', 
        //          subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'", 
        //          body: "Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' failed. Check console output at ${env.BUILD_URL}"
        // }
    }
}
